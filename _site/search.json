[
  {
    "objectID": "oprema.html",
    "href": "oprema.html",
    "title": "Oprema za vaje",
    "section": "",
    "text": "Slika 1: stm32f4discovery\n\n\nZa razvoj programov, razhroščevanje in programiranje razvojne plošče bomo uporabljali orodje STM32CubeIDE, ki se lahko uporablja za razvoj poljubnega mikrokrmilnika proizvajalca STMicroelectronics. Orodje je brezplačno in na voljo za vse operacijske sisteme, naložite si ga lahko na povezavi."
  },
  {
    "objectID": "uvod-v-c.html",
    "href": "uvod-v-c.html",
    "title": "Osvežitev programskega jezika C",
    "section": "",
    "text": "Podatkovni tipi\nKlasični primitivni podatkovni tipi v C-ju so, upajmo da, dobro znani vsakemu izmed vas. Za predstavitev celih števil uporabljamo char, short int (ali krajše short), int, long int (krajše long) ter long long int (krajše long long). Vsi omenjeni tipi imajo tudi nepredznačene oblike, ki jih dobite tako, da pred tip dodate rezervirano besedo unsigned, na primer unsigned int*. Tabela 1 prikazuje število bitov, ki jih običajno zasede posamezen podatkovni tip.\n\n\nTabela 1: Podatkovni tipi in njihova običajna dolžina v bitih.\n\n\nPodatkovni tip\nŠtevilo bitov (največkrat)\n\n\n\n\nchar\n8\n\n\nshort\n16\n\n\nint\n32\n\n\nlong\n32\n\n\nlong long\n64\n\n\n\n\nNimamo pa zagotovila, da bodo ti podatkovni tipi točno takšnih dolžin. Za podatkovni tip char vemo zgolj, da bo dolžina vsaj 8 bitov, lahko pa je tudi več. Pogosto bomo želeli bolj natančno določiti oziroma bolj jasno pokazati, koliko bitov naj zasede naša spremenljivka. Takrat bomo raje uporabili podatkovne tipe int8_t, int16_t, int32_t, uint8_t, uint16_t, uint32_t, ki so definirani v <stdint.h>. Dolžina tipov v bitih je tu podana kar v imenu, predpona u pa označuje nepredznačene tipe. Za te podatkovne tipe imamo zagotovilo, da če jih je na nekem sistemu mogoče uporabiti, bodo vedno pričakovanih dolžin.\n\n\nKazalci\nKazalci v jeziku C so pogosto trn v peti vsakega študenta. V vajah s kazalci ne bomo ustvarjali kompleksnih podatkovnih struktur, ampak bomo uporabljali njihov primarni namen – “kazanje” na specifični naslov.\nKazalec je namreč zgolj spremenljivka, katere vrednost predstavlja naslov. Tip kazalca pa nam pove kakšnega tipa je spremenljivka katere vrednost je v kazalcu.\nKazalec določenega tipa definiramo tako, da poleg tipa dodamo zvezdico. predstavlja kazalec na spremenljivko tipa . Naslov torej na 4 bajte, katerih vrednost predstavlja predznačeno celo število. Če imamo spremenljivko \\(a\\) definirano kot , kazalec na spremenljivko dobimo z ukazom . Znak & pred imenom spremenljivke namreč vrača njen naslov. Spodaj je podana koda običajnih ukazov, ki jih izvajamo s kazalci. Razlaga je podana v komentarjih:\n// definiramo kazalec\nint *p;\n// definiramo spremenljivko \nint a = 26;\n\np = &a; // kazalec kaze na a, recimo da se nahaja na naslovu 0x200\n*p = 12; // vrednost na naslovu 0x200 nastavimo na 12, kar pomeni da je vrednost a 12\n\n*(p+1) = 7; // vrednost na naslovu 0x204 nastavi na 7   \n// v zgornjem primeru s povecavo stevca za 1 pridemo do naslova 0x204 (0x200 + 0x4), do stirice pridemo, ker je na naslovu 0x200 spremenljivka tipa int, ki zaseda 4 bajte\n\n// cesa ne smemo poceti s kazalci\n// vse od spodaj nastetega je slaba praksa ali pa neveljaven ukaz\np = a; // TEGA NE POCNITE! S tem bi naslov kazalca spremenili na 12. Kaj je na naslovu 12 obicajno ne vemo!\n*a = 6; // TUDI TEGA NE POCNITE! S tem ukazom bi vrednost na naslov 12 nastavili na 6.\n\n&a = 4; // neveljaven ukaz\n&p = 6; // neveljaven ukaz"
  }
]